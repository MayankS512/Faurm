// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// * Next-Auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  faurms    Faurm[]    @relation(name: "faurms")
  responses Response[]
  filled    Faurm[]    @relation(name: "filled")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// * Faurm
model Faurm {
  id        String     @id @default(cuid())
  title     String
  questions Question[]
  responses Response[]
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], name: "faurms", onDelete: Cascade)
  filledBy  User[]     @relation(name: "filled")

  @@index([userId])
}

model Question {
  id      String   @id @default(cuid())
  title   String   @db.Text
  type    String
  fields  Field[]
  answers Answer[]
  faurmId String
  faurm   Faurm    @relation(fields: [faurmId], references: [id], onDelete: Cascade)

  @@index([faurmId])
}

model Field {
  id         String   @id @default(cuid())
  value      String
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model Response {
  id      String   @id @default(cuid())
  faurmId String
  faurm   Faurm    @relation(fields: [faurmId], references: [id], onDelete: Cascade)
  userId  String?
  User    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers Answer[]

  @@index([faurmId])
  @@index([userId])
}

model Answer {
  id         String   @id @default(cuid())
  responseId String
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  value      String   @db.Text

  @@index([responseId])
  @@index([questionId])
}
